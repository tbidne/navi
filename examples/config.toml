# Sets the notification system. Options are:
#
# Linux: "dbus" (default), "notify-send".
# Macos: "apple-script" (default).
note-system = "dbus"

# Some logging options.
[logging]
# Log level: Options are "debug", "info", "error", or "none" for no logging.
severity = "debug"
# How to handle the log file. E.g. "warn 10gb" will print a
# warning when the log file reaches 10gb. "delete 20 mb" will instead
# delete the file. Note that this only applies to startup i.e. the log
# file can grow arbitrarily large while navi is running.
size-mode = "delete 100.5 mb"
# Log location. Can be a file or "stdout". Defaults to the XDG state
# directory i.e. ~/.local/state/navi/<timestamp>.log
#location = "stdout"

# Built in battery percentage alerts.
[battery-percentage]
repeat-events = false
error-events = "no-repeats"
app = "sysfs"

[[battery-percentage.alert]]
percent = 50
urgency = "low"

[[battery-percentage.alert]]
percent = 30
urgency = "normal"

[[battery-percentage.alert]]
percent = 20
urgency = "critical"

[[battery-percentage.alert]]
percent = 10
urgency = "critical"

[[battery-percentage.alert]]
percent = 5
urgency = "critical"

# Custom "switch" event i.e. sends an update every time the status changes.
# This is based on if the output equals the trigger ("true", in this case)
# or not. That is, all other non-error outputs are considered 'false'.
#
# Send alert when the current minute changes its even/odd parity.
[[switch]]
poll-interval = 10
command = """
  min=`date +%M`;
  if [[ \"$min % 2\" -eq 0 ]]; then
    echo -n "true"
  else
    echo -n "false"
  fi
"""
trigger = "true"

[switch.note]
summary = "Even/Odd"
# Optional body, rendered as "Minute is even: true/false". Otherwise
# defaults to "Status: true/false".
body = "Minute is even"
timeout = 10

# Custom "single" event. Similar to "switch", though notifications are only
# sent for "true" i.e. when the trigger is activated.
#
# requires lm-sensors
[[single]]
command = """
  temp_res=$(sensors | grep "Core 0")
  regex="Core 0:\\s*\\+([0-9]+)\\.[0-9]{0,2}Â°[C|F].*"

  if [[ $temp_res =~ $regex ]]; then
    temp="${BASH_REMATCH[1]}"
    # not actually that hot...
    if [[ $temp -gt 20 ]]; then
      echo "true"
    else
      echo "false"
    fi
  else
    echo "couldn't parse: ${temp_res}"
    exit 1
  fi
"""
trigger = "true"

[single.note]
summary = "Temperature"
body = "We're hot!"
urgency = "critical"
timeout = 10

# Built-in network notifications, based on when the connection state changes.
[[net-interface]]
app = "nmcli"
poll-interval = 30
device = "wifi-device"

[[net-interface]]
app = "nmcli"
poll-interval = 60
device = "eth-device"
